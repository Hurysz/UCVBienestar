/**
 * @fileoverview Firestore Security Rules for UCV Conecta Application
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-based access model for user data while allowing public read access to resources and community chat messages.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owner.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointments, accessible only to the owner.
 * - /chat_messages/{messageId}: Stores chat messages, publicly readable but only creatable by authenticated users, associated with the sender's userId.
 * - /resources/{resourceId}: Stores resources, publicly readable but only creatable, updatable, and deletable with owner authorization.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public read access to /resources is allowed for easy access to learning materials.
 * - The rules enforce that a user can only create chat messages associated with their own userId.
 *
 * Denormalization for Authorization:
 * - Chat messages contain the userId of the sender, allowing rules to verify ownership without additional reads.
 *
 * Structural Segregation:
 * - User-specific data (profiles, appointments) is stored under /users/{userId} for easy, owner-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read, create, update, and delete their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile at /users/user123 with matching id field.
     * @allow (get) User with UID 'user123' reads their own profile at /users/user123.
     * @allow (update) User with UID 'user123' updates their own profile at /users/user123.
     * @allow (delete) User with UID 'user123' deletes their own profile at /users/user123.
     * @deny (create) User with UID 'user456' attempts to create a profile at /users/user123.
     * @deny (get) User with UID 'user456' attempts to read user 'user123's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures appointments under a user's profile, allowing only the owner to manage their appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User with UID 'user123' creates an appointment under their profile at /users/user123/appointments/appt001 with userId = 'user123'.
     * @allow (get) User with UID 'user123' reads their own appointment at /users/user123/appointments/appt001.
     * @allow (update) User with UID 'user123' updates their own appointment at /users/user123/appointments/appt001.
     * @allow (delete) User with UID 'user123' deletes their own appointment at /users/user123/appointments/appt001.
     * @deny (create) User with UID 'user456' attempts to create an appointment under user 'user123's profile.
     * @deny (get) User with UID 'user456' attempts to read an appointment under user 'user123's profile.
     * @principle Enforces document ownership for all operations on appointments.
     */
    match /users/{userId}/appointments/{appointmentId} {
       function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId); // Allow listing appointments for the owner.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages community chat messages, allowing public read access and owner-based creation.
     * @path /chat_messages/{messageId}
     * @allow (get) Any user can read any chat message.
     * @allow (list) Any user can list chat messages.
     * @allow (create) User with UID 'user123' creates a chat message with userId = 'user123'.
     * @deny (create) User with UID 'user456' attempts to create a chat message with userId = 'user123'.
     * @deny (update) No one can update a chat message (immutability).
     * @deny (delete) No one can delete a chat message.
     * @principle Allows public reads but enforces ownership for message creation.
     */
    match /chat_messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages resources, allowing public read access and owner-only writes.
     * @path /resources/{resourceId}
     * @allow (get) Any user can read any resource.
     * @allow (list) Any user can list resources.
     * @allow (create) User with UID 'user123' creates a resource. The resource MUST contain an `ownerId` field with the user's UID.
     * @deny (update) User with UID 'user456' attempts to update a resource they don't own.
     * @deny (delete) User with UID 'user456' attempts to delete a resource they don't own.
     * @principle Allows public reads but enforces ownership for writes.
     */
    match /resources/{resourceId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}